{"version":3,"sources":["App.js","DayTree.js","AddTask.js","EditTask.js","List.js","serviceWorker.js","index.js","logo.svg"],"names":["App","INITIAL_STATE","React","id","hasCaret","icon","label","isExpanded","content","position","Position","RIGHT","childNodes","secondaryLabel","intent","Intent","PRIMARY","className","Classes","TREE_NODE_ICON","disabled","ConfirmToaster","Toaster","create","TOP","jsDateFormatter","formatDate","date","toLocaleDateString","parseDate","str","Date","placeholder","FormError","props","style","color","display","DateError","Form","handleChange","e","preventDefault","setState","target","name","value","handleSubmit","state","taskName","nameErrorDisplay","taskDate","dateErrorDisplay","formData","time","taskTime","description","taskDescription","addTaskCallback","toggleChildOverlay","show","message","SUCCESS","timeout","isOpen","bind","this","parentOpenCallback","labelFor","labelInfo","onChange","required","LABEL","defaultValue","useAmPm","toTimeString","split","htmlFor","selectedDate","isUserChange","helperText","DIALOG_FOOTER_ACTIONS","DANGER","onClick","margin","type","AddTask","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","usePortal","useTallContent","refHandlers","button","ref","handleAutoFocusChange","handleBooleanChange","handleBackdropChange","handleEnforceFocusChange","handleEscapeKeyChange","handleUsePortalChange","handleOutsideClickChange","val","handleOpen","handleClose","focusButton","focus","toggleScrollButton","isOpenCallback","childisOpen","classes","classNames","CARD","ELEVATION_4","elementRef","onClose","OVERLAY_SCROLL_CONTAINER","EditForm","taskId","editTaskCallback","currEditTask","EditTask","task","a","width","left","initTasks","done","formatTime","timeFormated","DayStyle","marginLeft","marginTop","marginBottom","fontSize","textDecoration","fontWeight","Item","interactive","elevation","Elevation","TWO","href","editTask","deleteTask","Day","tasksList","sort","b","map","index","getDay","List","parseInt","Math","random","toString","tasks","push","localStorage","setItem","JSON","stringify","forceUpdate","event","parentElement","filter","curEditTask","editComponent","current","createRef","localStorageTasks","parse","getItem","console","log","xs","key","taskDaysGrouped","reduce","rv","x","taskDaysList","Object","keys","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.12fdd4e1.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\n\nimport { Classes, Icon, Intent, ITreeNode, Position, Tooltip, Tree } from \"@blueprintjs/core\";\n\nexport default class DayTree extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { nodes: INITIAL_STATE };\n        this.handleNodeClick = (nodeData, _nodePath, e) => {\n            const originallySelected = nodeData.isSelected;\n            if (!e.shiftKey) {\n                this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n            }\n            nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n            this.setState(this.state);\n        };\n\n        this.handleNodeCollapse = (nodeData) => {\n            nodeData.isExpanded = false;\n            this.setState(this.state);\n        };\n\n        this.handleNodeExpand = (nodeData) => {\n            nodeData.isExpanded = true;\n            this.setState(this.state);\n        };\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    className={Classes.ELEVATION_0}\n                />\n            </div>\n        );\n    }\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n\n}\n\nconst INITIAL_STATE = [\n    {\n        id: 0,\n        hasCaret: true,\n        icon: \"folder-close\",\n        label: \"Folder 0\",\n    },\n    {\n        id: 1,\n        icon: \"folder-close\",\n        isExpanded: true,\n        label: (\n            <Tooltip content=\"I'm a folder <3\" position={Position.RIGHT}>\n                Folder 1\n            </Tooltip>\n        ),\n        childNodes: [\n            {\n                id: 2,\n                icon: \"document\",\n                label: \"Item 0\",\n                secondaryLabel: (\n                    <Tooltip content=\"An eye!\">\n                        <Icon icon=\"eye-open\" />\n                    </Tooltip>\n                ),\n            },\n            {\n                id: 3,\n                icon: <Icon icon=\"tag\" intent={Intent.PRIMARY} className={Classes.TREE_NODE_ICON} />,\n                label: \"Organic meditation gluten-free, sriracha VHS drinking vinegar beard man.\",\n            },\n            {\n                id: 4,\n                hasCaret: true,\n                icon: \"folder-close\",\n                label: (\n                    <Tooltip content=\"foo\" position={Position.RIGHT}>\n                        Folder 2\n                    </Tooltip>\n                ),\n                childNodes: [\n                    { id: 5, label: \"No-Icon Item\" },\n                    { id: 6, icon: \"tag\", label: \"Item 1\" },\n                    {\n                        id: 7,\n                        hasCaret: true,\n                        icon: \"folder-close\",\n                        label: \"Folder 3\",\n                        childNodes: [\n                            { id: 8, icon: \"document\", label: \"Item 0\" },\n                            { id: 9, icon: \"tag\", label: \"Item 1\" },\n                        ],\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: 2,\n        hasCaret: true,\n        icon: \"folder-close\",\n        label: \"Super secret files\",\n        disabled: true,\n    },\n];","/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Button, Classes, Code, H3, H5, Intent, Overlay, Switch, Icon, FormGroup, InputGroup, HTMLSelect, Label, Position, Toaster } from \"@blueprintjs/core\";\nimport { handleBooleanChange, handleNumberChange, handleStringChange } from \"@blueprintjs/docs-theme\";\nimport { TimePicker, TimePrecision, DateInput } from \"@blueprintjs/datetime\";\nimport \"./index.css\";\n\nimport './blueprint-datetime.css'\nimport './_transitions.scss';\n\nconst OVERLAY_EXAMPLE_CLASS = \"overlay-transition\";\n\n\n\n// confirm message for task\nconst ConfirmToaster = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.TOP,\n});\n\n\n// styling for add task\nconst addTaskButtonStyle = {\n        marginTop: \"2em\",\n        marginLeft: \"37em\"\n}\n\n\n// Date formatter\nconst jsDateFormatter = {\n    // note that the native implementation of Date functions differs between browsers\n    formatDate: date => date.toLocaleDateString(),\n    parseDate: str => new Date(str),\n    placeholder: \"M/D/YYYY\",\n};\n\n\n\n// handle form errors\nvar FormError = (props) => {\n    return (<p style={{color: \"red\", display: props.display}}>Please fill out task name</p>);\n}\n\nvar DateError = (props) => {\n    return (<p style={{color: \"red\", display: props.display}}>Please select a date</p>);\n}\n\n\n// form component\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            taskName: \"\",\n            taskTime: \"12:00\",\n            taskDate: new Date().toLocaleDateString(),\n            taskDescription: \"\",\n            isOpen: false,\n            nameErrorDisplay: \"none\",\n            dateErrorDisplay: \"none\"\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.toggleChildOverlay = this.toggleChildOverlay.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({ isOpen: props.isOpen })\n    }\n\n    \n\n  toggleChildOverlay() {\n    this.setState({\n      isOpen: this.state.isOpen\n    });\n    this.props.parentOpenCallback(this.state.isOpen);\n  }\n\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // verify fields has been filled\n\n    if (this.state.taskName === \"\") {\n        this.setState({nameErrorDisplay: \"block\"});\n    }\n    if (this.state.taskDate === null) {\n            this.setState({dateErrorDisplay: \"block\"});\n    }\n\n    // fields have been filled\n    else if (this.state.taskName !== \"\" && this.state.taskDate !== null){\n        this.setState({nameErrorDisplay: \"none\"});\n        this.setState({dateErrorDisplay: \"none\"});\n        var formData = {\n            name: this.state.taskName,\n            time: this.state.taskTime,\n            date: this.state.taskDate,\n            description: this.state.taskDescription\n        };\n        this.props.addTaskCallback(formData);\n        this.toggleChildOverlay();\n        ConfirmToaster.show({ \n                            message: \"Task Added\",\n                            icon: \"tick\",\n                            intent: Intent.SUCCESS,\n                            timeout: 700\n\n                        });\n    }\n  }\n\n    render() {\n        return(\n            <form>\n                <FormGroup\n                            label=\"Task Name\"\n                            labelFor=\"text-name\"\n                            labelInfo=\"(required)\"\n                        >\n                            <InputGroup \n                                id=\"taskName\"\n                                name=\"taskName\"\n                                placeholder=\"Task Name\"\n                                value={this.state.taskName}\n                                // onChange={this.handleChange}\n                                onChange={this.handleChange}\n                                required\n                            />\n                        </FormGroup>\n                        <FormError display={this.state.nameErrorDisplay}/>\n                        <FormGroup\n                            label=\"Time\"\n                            labelFor=\"text-time\"\n                            labelInfo=\"(required)\"\n                        >\n                            <TimePicker \n                                id=\"taskTime\"\n                                name=\"taskTime\"\n                                className={Classes.LABEL}\n                                defaultValue={new Date(this.state.taskTime)}\n                                useAmPm={true}\n                                onChange={(time) => this.setState({taskTime : time.toTimeString().split(':')[0] + \":\" + time.toTimeString().split(':')[1]})}\n                                required\n                            />\n                        </FormGroup>\n                        <Label htmlFor=\"task-date\"> Date\n                        <DateInput \n                            {...jsDateFormatter}\n                            defaultValue={new Date()} \n                            onChange={(selectedDate,isUserChange) => this.setState({ taskDate : selectedDate == null ? selectedDate : selectedDate.toLocaleDateString()})}\n                            required\n                        />\n                        </Label>\n                        <DateError display={this.state.dateErrorDisplay} />\n                        <FormGroup\n                            helperText=\"Brief description of task\"\n                            label=\"Description\"\n                            labelFor=\"text-description\"\n                        >\n                            <InputGroup \n                                id=\"taskDescription\"\n                                name=\"taskDescription\"\n                                placeholder=\"Description\"\n                                value={this.state.taskDescription}\n                                onChange={this.handleChange}\n                                required\n                            />\n\n                        </FormGroup>\n                        <br />\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button intent={Intent.DANGER} onClick={this.toggleChildOverlay} style={{ margin: \"\" }}>\n                                Close\n                            </Button>\n                            <Button onClick={this.handleSubmit} style={{ margin: \"\" }} type=\"submit\">\n                                Add\n                            </Button>\n                        </div>\n            </form>\n        );\n    }\n}\n\n\n// Overlay for adding task\nexport default class AddTask extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            autoFocus: true,\n            canEscapeKeyClose: true,\n            canOutsideClickClose: true,\n            enforceFocus: true,\n            hasBackdrop: true,\n            isOpen: false,\n            usePortal: true,\n            useTallContent: false,\n            formData: []\n        };\n        this.refHandlers = {\n            button: (ref) => (this.button = ref),\n        };\n        this.handleAutoFocusChange = handleBooleanChange(autoFocus => this.setState({ autoFocus }));\n        this.handleBackdropChange = handleBooleanChange(hasBackdrop => this.setState({ hasBackdrop }));\n        this.handleEnforceFocusChange = handleBooleanChange(enforceFocus => this.setState({ enforceFocus }));\n        this.handleEscapeKeyChange = handleBooleanChange(canEscapeKeyClose => this.setState({ canEscapeKeyClose }));\n        this.handleUsePortalChange = handleBooleanChange(usePortal => this.setState({ usePortal }));\n        this.handleOutsideClickChange = handleBooleanChange(val => this.setState({ canOutsideClickClose: val }));\n        this.handleOpen = () => this.setState({ isOpen: true });\n        this.handleClose = () => this.setState({ isOpen: false, useTallContent: false });\n        this.focusButton = () => this.button.focus();\n        this.toggleScrollButton = () => this.setState({ useTallContent: !this.state.useTallContent });\n        this.isOpenCallback = (childisOpen) => this.setState({isOpen: childisOpen});\n        this.addTaskCallback = (formData) => this.props.addTaskCallback(formData);\n        // form fields\n        // this.handleNameChange = this.handleNameChange.bind(this);\n\n\n\n    }\n\n\n    render() {\n        const overlayStyle = {\n                width: \"500px\",\n                left: \"30%\",\n                top:\"40%\",\n                position:\"absolute\"\n            }\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS, \"task-modal\");\n\n        return (\n            <div>\n                <Button elementRef={this.refHandlers.button} onClick={this.handleOpen} intent=\"success\" className=\"add-task-button\">\n                    <Icon icon=\"document\" />  &nbsp;&nbsp; Add Task</Button>\n                <Overlay onClose={this.handleClose} className={Classes.OVERLAY_SCROLL_CONTAINER} {...this.state}>\n                    <div className={classes} >\n                        <H3>Add Task</H3>\n\n\n                        <Form\n                            isOpen={this.state.isOpen}\n                            parentOpenCallback = {this.isOpenCallback}\n                            addTaskCallback = {this.addTaskCallback}\n                        />\n\n\n                        <br />\n\n                    </div>\n                </Overlay>\n            </div>\n        );\n    }\n}\n","/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Button, Classes, Code, H3, H5, Intent, Overlay, Switch, Icon, FormGroup, InputGroup, HTMLSelect, Label } from \"@blueprintjs/core\";\nimport { handleBooleanChange, handleNumberChange, handleStringChange } from \"@blueprintjs/docs-theme\";\nimport { TimePicker, TimePrecision, DateInput } from \"@blueprintjs/datetime\";\nimport './blueprint-datetime.css'\nimport './_transitions.scss';\n\nconst OVERLAY_EXAMPLE_CLASS = \"overlay-transition\";\n\n\n// Date formatter\nconst jsDateFormatter = {\n    // note that the native implementation of Date functions differs between browsers\n    formatDate: date => date.toLocaleDateString(),\n    parseDate: str => new Date(str),\n    placeholder: \"M/D/YYYY\",\n};\n\n\n\n// handle form errors\nvar FormError = (props) => {\n    return (<p style={{color: \"red\", display: props.display}}>Please fill out task name</p>);\n}\n\nvar DateError = (props) => {\n    return (<p style={{color: \"red\", display: props.display}}>Please select a date</p>);\n}\n\n\n// form component\nclass EditForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            taskId: props.currEditTask.id,\n            taskName: props.currEditTask.name,\n            taskTime: props.currEditTask.time,\n            taskDate: props.currEditTask.date,\n            taskDescription: props.currEditTask.description,\n            isOpen: false,\n            nameErrorDisplay: \"none\",\n            dateErrorDisplay: \"none\"\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.toggleChildOverlay = this.toggleChildOverlay.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({ isOpen: props.isOpen })\n    }\n\n    \n\n  toggleChildOverlay() {\n    this.setState({\n      isOpen: this.state.isOpen\n    });\n    this.props.parentOpenCallback(this.state.isOpen);\n  }\n\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // verify fields has been filled\n\n    if (this.state.taskName === \"\") {\n        this.setState({nameErrorDisplay: \"block\"});\n    }\n    if (this.state.taskDate === null) {\n            this.setState({dateErrorDisplay: \"block\"});\n    }\n\n    // fields have been filled\n    else if (this.state.taskName !== \"\" && this.state.taskDate !== null){\n        this.setState({nameErrorDisplay: \"none\"});\n        this.setState({dateErrorDisplay: \"none\"});\n        var formData = {\n            id: this.state.taskId,\n            name: this.state.taskName,\n            time: this.state.taskTime,\n            date: this.state.taskDate,\n            description: this.state.taskDescription\n        };\n        this.props.editTaskCallback(formData);\n        this.toggleChildOverlay();\n    }\n  }\n\n    render() {\n        return(\n            <form>\n                <FormGroup\n                            helperText=\"Brief name for task\"\n                            label=\"Task Name\"\n                            labelFor=\"text-name\"\n                            labelInfo=\"(required)\"\n                        >\n                            <InputGroup \n                                id=\"taskName\"\n                                name=\"taskName\"\n                                placeholder=\"Task Name\"\n                                value={this.state.taskName}\n                                // onChange={this.handleChange}\n                                onChange={this.handleChange}\n                                required\n                            />\n                        </FormGroup>\n                        <FormError display={this.state.nameErrorDisplay}/>\n                        <FormGroup\n                            label=\"Time\"\n                            labelFor=\"text-time\"\n                            labelInfo=\"(required)\"\n                        >\n                            <TimePicker \n                                id=\"taskTime\"\n                                name=\"taskTime\"\n                                className={Classes.LABEL}\n                                defaultValue={new Date('Sun Dec 31 1899 ' + this.state.taskTime)}\n                                useAmPm={true}\n                                onChange={(time) => this.setState({taskTime : time.toTimeString().split(':')[0] + \":\" + time.toTimeString().split(':')[1]})}\n                                required\n                            />\n                        </FormGroup>\n                        <Label htmlFor=\"task-date\"> Date\n                        <DateInput \n                            {...jsDateFormatter}\n                            defaultValue={new Date(this.state.taskDate)} \n                            onChange={(selectedDate,isUserChange) => this.setState({ taskDate : selectedDate == null ? selectedDate : selectedDate.toLocaleDateString()})}\n                            required\n                        />\n                        </Label>\n                        <DateError display={this.state.dateErrorDisplay} />\n                        <FormGroup\n                            label=\"Description\"\n                            labelFor=\"text-description\"\n                        >\n                            <InputGroup \n                                id=\"taskDescription\"\n                                name=\"taskDescription\"\n                                placeholder=\"Description\"\n                                value={this.state.taskDescription}\n                                onChange={this.handleChange}\n                                required\n                            />\n\n                        </FormGroup>\n                        <br />\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button intent={Intent.DANGER} onClick={this.toggleChildOverlay} style={{ margin: \"\" }}>\n                                Close\n                            </Button>\n                            <Button onClick={this.handleSubmit} style={{ margin: \"\" }} type=\"submit\">\n                                Edit\n                            </Button>\n                        </div>\n            </form>\n        );\n    }\n}\n\n\n// Overlay for adding task\nexport default class EditTask extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currEditTask: {},\n            autoFocus: true,\n            canEscapeKeyClose: true,\n            canOutsideClickClose: true,\n            enforceFocus: true,\n            hasBackdrop: true,\n            // isOpen: false,\n            usePortal: true,\n            useTallContent: false,\n            formData: \"\"\n        };\n        this.refHandlers = {\n            button: (ref) => (this.button = ref),\n        };\n        this.handleAutoFocusChange = handleBooleanChange(autoFocus => this.setState({ autoFocus }));\n        this.handleBackdropChange = handleBooleanChange(hasBackdrop => this.setState({ hasBackdrop }));\n        this.handleEnforceFocusChange = handleBooleanChange(enforceFocus => this.setState({ enforceFocus }));\n        this.handleEscapeKeyChange = handleBooleanChange(canEscapeKeyClose => this.setState({ canEscapeKeyClose }));\n        this.handleUsePortalChange = handleBooleanChange(usePortal => this.setState({ usePortal }));\n        this.handleOutsideClickChange = handleBooleanChange(val => this.setState({ canOutsideClickClose: val }));\n        this.handleOpen = async(task) => {await this.setState({ \n                                        isOpen: true,\n                                        currEditTask: task[0]        \n                                    })};\n        this.handleClose = () => this.setState({ isOpen: false, useTallContent: false });\n        this.focusButton = () => this.button.focus();\n        this.toggleScrollButton = () => this.setState({ useTallContent: !this.state.useTallContent });\n        this.isOpenCallback = (childisOpen) => this.setState({isOpen: childisOpen});\n        this.editTaskCallback = (formData) => this.props.editTaskCallback(formData);\n        // form fields\n        // this.handleNameChange = this.handleNameChange.bind(this);\n\n\n\n    }\n    render() {\n        const overlayStyle = {\n                width: \"500px\",\n                left: \"30%\",\n                top:\"40%\",\n                position:\"absolute\"\n            }\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS, \"task-modal\");\n\n        return (\n            <div>\n                <Overlay onClose={this.handleClose} className={Classes.OVERLAY_SCROLL_CONTAINER} {...this.state}>\n                    <div className={classes} style={{width: \"500px\", left: \"30%\", position:\"absolute\"}}>\n                        <H3>Edit Task</H3>\n\n\n                        <EditForm\n                            currEditTask={this.state.currEditTask}\n                            isOpen={this.state.isOpen}\n                            parentOpenCallback = {this.isOpenCallback}\n                            editTaskCallback = {this.editTaskCallback}\n                        />\n\n\n                        <br />\n\n                    </div>\n                </Overlay>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Button, Card, Elevation, Icon, Intent, ITreeNode, Position, Tooltip, Tree } from \"@blueprintjs/core\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport DayTree from './DayTree'\nimport AddTask from './AddTask'\nimport EditTask from './EditTask'\nimport \"./index.css\";\n\n\nconst initTasks = [\n\t{\n\t\tid: \"1\",\n\t\tname: \"Read\",\n\t\tdescription: \"Read Talking To Strangers\",\n\t\ttime: \"14:30\",\n\t\tdate: \"4/21/2020\",\n\t\tdone: false\n\t},\n\t{\n\t\tid: \"2\",\n\t\tname: \"Cook\",\n\t\tdescription: \"Make Stir Fry\",\n\t\ttime: \"16:20\",\n\t\tdate: \"4/20/2020\",\n\t\tdone: false\n\t},\n\t{\n\t\tid: \"3\",\n\t\tname: \"Clean\",\n\t\tdescription: \"Clean bathroom and kitchen\",\n\t\ttime: \"18:00\",\n\t\tdate: \"4/20/2020\",\n\t\tdone: false\n\t},\n\t{\n\t\tid: \"4\",\n\t\tname: \"Code\",\n\t\tdescription: \"Code some React and Leetcode\",\n\t\ttime: \"13:30\",\n\t\tdate: \"4/23/2020\",\n\t\tdone: false\n\t}\n]\n\n// finds weekday out\nvar getWeekday = (date) => {\n\tvar d = new Date(date);\n\tvar weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n\treturn weekday[d.getDay()] + \", \" + date;\n};\n\n\n// formats time for display\nvar formatTime = (time) => {\n\tvar timeFormated = time.split(':')\n\tif (timeFormated[0] > \"12\") {\n\t\ttime = (timeFormated[0] - 12) + \":\" + timeFormated[1] + \" PM\"\n\t}\n\telse {\n\t\ttime = time + \" AM\"\n\t}\n\treturn time\n} \n\n\n\n// orders json keys\nvar groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nconst DayStyle = {\n\tmarginLeft: \"1em\",\n\tmarginTop: \"2em\",\n\tmarginBottom: \"2em\",\n\tfontSize: \"15px\",\n\ttextDecoration: \"underline\",\n\tfontWeight: 500\n}\n\n\nconst CardStyle = {\n\twidth: \"40vw\",\n\tmargin: \"1em\",\n\tpadding: \"2em\",\n\tmarginLeft: \"4em\"\n}\n\nfunction Item(props) {\n\treturn(\n\t\t<Card interactive={true} elevation={Elevation.TWO} id={props.id} className={\"task-card\"} >\n\t\t\t<h4>{props.name}</h4>\n\t\t\t<p>{props.time} : {props.description}</p>\n\t\t\t<h5><a href=\"#\" id={props.id} onClick={props.editTask}>Edit</a> | <a href=\"#\" id={props.id} onClick={props.deleteTask} >Delete</a></h5>\n\t\t</Card>\n\t);\n}\n\nfunction Day(props) {\n\tvar tasksList = props.description.sort((a,b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)).map((task, index) => {\n \t\t\t\treturn(<Item\n\t\t \t\t\t\t\tid={task.id}\n\t\t \t\t\t\t\tname={task.name}\n\t\t \t\t\t\t\ttime={formatTime(task.time)}\n\t\t \t\t\t\t\tdescription={task.description}\n\t\t \t\t\t\t\teditTask={props.editTask}\n\t\t \t\t\t\t\tdeleteTask={props.deleteTask(task.id)}\n \t\t\t\t\t\t/>);\n \t\t\t});\n\treturn(\n\t\t<div>\n\t\t\t<p style={DayStyle}>{getWeekday(props.date)}</p>\n\t\t\t{tasksList}\n\t\t</div>\n\t);\n}\n\nclass List extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\ttasks: [],\n\t\t\tcurEditTask: []\n\t\t}\n\n\t\tthis.addTaskCallback = this.addTaskCallback.bind(this);\n\t\tthis.editTaskCallback = this.editTaskCallback.bind(this);\n\t\tthis.editTask = this.editTask.bind(this);\n\t\tthis.deleteTask = this.deleteTask.bind(this);\n\n\t\tthis.editComponent = React.createRef();\n\n\n\t}\n\n\tcomponentWillMount() {\n\t\t// localStorage.removeItem('tasks');\n\t\tvar localStorageTasks = JSON.parse(localStorage.getItem('tasks'));\n\t\tif (localStorageTasks === null) {\n\t\t  this.setState({\n\t\t\ttasks: initTasks\n\t\t  });\n\t\t  localStorage.setItem('tasks',JSON.stringify(initTasks));\n\t\t  console.log(\"localStorage tasks\", JSON.stringify(initTasks));\n\t\t}\n\t\telse {\n\t\t  console.log(localStorageTasks);\n\t\t  this.setState({\n\t\t\ttasks: localStorageTasks\n\t\t  });\n\t\t}\n\t  }\n\n\t// adds task\n\taddTaskCallback = (formData) => {\n   \n            formData[\"id\"] = parseInt(Math.random()*100).toString();\n            formData[\"done\"] = false;\n\t\t\tthis.state.tasks.push(formData);\n\t\t\tlocalStorage.setItem('tasks',JSON.stringify(this.state.tasks));\n            this.forceUpdate(); \n            // this.setState({tasks: tasksUpdated});\n        };\n\n    // calls edit overlay\n    editTask = (event) => {\n    \tvar id = event.target.parentElement.parentElement.id;\n    \tvar editTask = this.state.tasks.filter((task) => {\n        \t\treturn task.id == id;\n        });\n        this.setState({\n        \tcurEditTask: editTask\n        });\n        this.editComponent.current.handleOpen(editTask);\n    }\n\n\t// edits task\n\teditTaskCallback = (formData) => {\n   \t\t\t\n            this.state.tasks = this.state.tasks.filter((task) => {\n        \t\treturn task.id !== formData.id;\n        \t});\n\t\t\tthis.state.tasks.push(formData);\n\t\t\tlocalStorage.setItem('tasks',JSON.stringify(this.state.tasks));\n            this.forceUpdate(); \n        };    \n\n\n    deleteTask = (event) => {\n    \tvar id = event.target.id\n\n        \tthis.state.tasks = this.state.tasks.filter((task) => {\n        \t\treturn task.id !== id;\n\t\t\t});\n\t\t\tlocalStorage.setItem('tasks',JSON.stringify(this.state.tasks));\n        \tthis.forceUpdate();\n        }\n\t\n\trender() {\n\n\t\tvar tasksList = this.state.tasks.sort((a,b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)).map((task, index) => {\n\t\t\t\treturn(<Item name={task.name} time={task.time}/>);\n\t\t\t});\n\n\t\tvar taskDaysGrouped = groupBy(this.state.tasks, 'date');\n\t\tvar taskDayKeys = Object.keys(taskDaysGrouped)\n\t\tvar taskDaysList = taskDayKeys.map((date, index) => {\n\t\t\treturn(<Day\n\t\t\t\tdate={date}\n\t\t\t\tdescription={taskDaysGrouped[date]}\n\t\t\t\teditTask={this.editTask}\n\t\t\t\tdeleteTask={(id) => this.deleteTask} />);\n\t\t});\n\n\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t<AddTask addTaskCallback={this.addTaskCallback} />\n\t\t\t\t\t<EditTask \n\t\t\t\t\t\tref={this.editComponent}\n\t\t\t\t\t\teditTaskCallback={this.editTaskCallback}\n\t\t\t\t\t/>\n\t\t\t\t\t{taskDaysList}\n\t\t\t\t</div>\n\t\t\t\t);\n\t}\n}\n\n\nexport default List;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport List from './List';\nimport * as serviceWorker from './serviceWorker';\n// import * as firebase from 'firebase'\n\nReactDOM.render(\n  <React.StrictMode>\n    <List />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}